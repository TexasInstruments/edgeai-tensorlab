[39m
=> args: {'dataset_config': {'split_name': 'val', 'max_depth_bfr_scaling': 80, 'depth_scale': 1, 'train_depth_log': 1}, 'use_semseg_for_depth': False, 'model_config': {'output_type': ['segmentation'], 'output_channels': None, 'prediction_channels': None, 'input_channels': (3,), 'final_upsample': False, 'output_range': None, 'num_decoders': None, 'freeze_encoder': False, 'freeze_decoder': False, 'multi_task_type': 'learned', 'target_input_ratio': 1, 'input_nv12': False, 'enable_fp16': False}, 'model': None, 'model_name': 'fpnlite_pixel2pixel_aspp_mobilenetv2_1p4_tv', 'dataset_name': 'ade20k_seg_class32', 'transforms': None, 'input_channel_reverse': False, 'data_path': './data/datasets/ADEChallengeData2016', 'save_path': None, 'phase': 'training', 'date': '2021-03-27_00-08-50', 'logger': <pytorch_jacinto_ai.xnn.utils.logger.TeeLogger object at 0x7fa37e521090>, 'show_gpu_usage': False, 'split_file': None, 'split_files': None, 'split_value': None, 'optimizer': 'sgd', 'scheduler': 'cosine', 'workers': 8, 'epochs': 120, 'start_epoch': 0, 'epoch_size': 0, 'epoch_size_val': 0, 'batch_size': 32, 'total_batch_size': 32, 'iter_size': 1, 'lr': 0.1, 'lr_clips': None, 'lr_calib': 0.05, 'warmup_epochs': 5, 'warmup_factor': 0.001, 'momentum': 0.9, 'beta': 0.999, 'weight_decay': 0.0001, 'bias_decay': None, 'sparse': True, 'tensorboard_num_imgs': 5, 'pretrained': '/data/adas_vision_data1/users/soyeb/bitbucket/pytorch-jacinto-ai-devkit/data/checkpoints/ade20k_seg_class32/cfg11_2021-03-07_23-36-26_ade20k_seg_class32_fpnlite_pixel2pixel_aspp_mobilenetv2_1p4_tv_resize512x512_traincrop512x512_epcoh120_53.10_53.01/training/model_best.pth', 'resume': None, 'no_date': False, 'print_freq': 10, 'milestones': (100, 200), 'losses': [['segmentation_loss']], 'metrics': [['segmentation_metrics']], 'multi_task_factors': None, 'class_weights': None, 'loss_mult_factors': None, 'multistep_gamma': 0.25, 'polystep_power': 0.9, 'rand_seed': 1, 'img_border_crop': None, 'target_mask': None, 'rand_resize': [512, 512], 'rand_output_size': None, 'rand_scale': (1.0, 2.0), 'rand_crop': [512, 512], 'img_resize': [512, 512], 'output_size': [768, 768], 'count_flops': True, 'shuffle': True, 'shuffle_val': True, 'transform_rotation': 5, 'is_flow': None, 'upsample_mode': 'bilinear', 'image_prenorm': True, 'image_mean': (128.0,), 'image_scale': (0.015625,), 'max_depth': 80, 'pivot_task_idx': 0, 'parallel_model': True, 'parallel_criterion': True, 'evaluate_start': True, 'save_onnx': True, 'print_model': False, 'run_soon': True, 'quantize': False, 'bitwidth_weights': 8, 'bitwidth_activations': 8, 'histogram_range': True, 'bias_calibration': True, 'per_channel_q': False, 'constrain_bias': None, 'save_mod_files': False, 'make_score_zero_mean': False, 'no_q_for_dws_layer_idx': 0, 'viz_colormap': 'rainbow', 'freeze_bn': False, 'tensorboard_enable': True, 'print_train_class_iou': False, 'print_val_class_iou': False, 'freeze_layers': None, 'opset_version': 11, 'prob_color_to_gray': (0.0, 0.0), 'use_pinned_memory': False, 'n_iter': 0, 'best_metric': -1}
batch_size: 32
best_metric: -1
beta: 0.999
bias_calibration: True
bias_decay: None
bitwidth_activations: 8
bitwidth_weights: 8
class_weights: None
constrain_bias: None
count_flops: True
data_path: ./data/datasets/ADEChallengeData2016
dataset_config: {'split_name': 'val', 'max_depth_bfr_scaling': 80, 'depth_scale': 1, 'train_depth_log': 1}
dataset_name: ade20k_seg_class32
date: 2021-03-27_00-08-50
epoch_size: 0
epoch_size_val: 0
epochs: 120
evaluate_start: True
freeze_bn: False
freeze_layers: None
histogram_range: True
image_mean: (128.0,)
image_prenorm: True
image_scale: (0.015625,)
img_border_crop: None
img_resize: [512, 512]
input_channel_reverse: False
is_flow: None
iter_size: 1
logger: <pytorch_jacinto_ai.xnn.utils.logger.TeeLogger object at 0x7fa37e521090>
loss_mult_factors: None
losses: [['segmentation_loss']]
lr: 0.1
lr_calib: 0.05
lr_clips: None
make_score_zero_mean: False
max_depth: 80
metrics: [['segmentation_metrics']]
milestones: (100, 200)
model: None
model_config: {'output_type': ['segmentation'], 'output_channels': None, 'prediction_channels': None, 'input_channels': (3,), 'final_upsample': False, 'output_range': None, 'num_decoders': None, 'freeze_encoder': False, 'freeze_decoder': False, 'multi_task_type': 'learned', 'target_input_ratio': 1, 'input_nv12': False, 'enable_fp16': False}
model_name: fpnlite_pixel2pixel_aspp_mobilenetv2_1p4_tv
momentum: 0.9
multi_task_factors: None
multistep_gamma: 0.25
n_iter: 0
no_date: False
no_q_for_dws_layer_idx: 0
opset_version: 11
optimizer: sgd
output_size: [768, 768]
parallel_criterion: True
parallel_model: True
per_channel_q: False
phase: training
pivot_task_idx: 0
polystep_power: 0.9
pretrained: /data/adas_vision_data1/users/soyeb/bitbucket/pytorch-jacinto-ai-devkit/data/checkpoints/ade20k_seg_class32/cfg11_2021-03-07_23-36-26_ade20k_seg_class32_fpnlite_pixel2pixel_aspp_mobilenetv2_1p4_tv_resize512x512_traincrop512x512_epcoh120_53.10_53.01/training/model_best.pth
print_freq: 10
print_model: False
print_train_class_iou: False
print_val_class_iou: False
prob_color_to_gray: (0.0, 0.0)
quantize: False
rand_crop: [512, 512]
rand_output_size: None
rand_resize: [512, 512]
rand_scale: (1.0, 2.0)
rand_seed: 1
resume: None
run_soon: True
save_mod_files: False
save_onnx: True
save_path: None
scheduler: cosine
show_gpu_usage: False
shuffle: True
shuffle_val: True
sparse: True
split_file: None
split_files: None
split_value: None
start_epoch: 0
target_mask: None
tensorboard_enable: True
tensorboard_num_imgs: 5
total_batch_size: 32
transform_rotation: 5
transforms: None
upsample_mode: bilinear
use_pinned_memory: False
use_semseg_for_depth: False
viz_colormap: rainbow
warmup_epochs: 5
warmup_factor: 0.001
weight_decay: 0.0001
workers: 8
=> will save everything to ./data/checkpoints/ade20k_seg_class32/2021-03-27_00-08-50_ade20k_seg_class32_fpnlite_pixel2pixel_aspp_mobilenetv2_1p4_tv_resize512x512_traincrop512x512/training
=> fetching images in './data/datasets/ADEChallengeData2016'
=> 22210 samples found, 20210 train samples and 2000 test samples 
=> class weights available for dataset: [array([0.161, 0.198, 0.292, 0.356, 0.503, 0.651, 0.694, 0.785, 1.353,
       1.578, 1.708, 1.727, 1.883, 1.953, 2.07 , 2.648, 2.841, 2.867,
       3.005, 3.005, 3.034, 3.189, 4.223, 4.664, 4.808, 5.123, 5.208,
       5.896, 6.01 , 6.793, 7.102, 7.102], dtype=float32)]
=> loading pretrained weights file: /data/adas_vision_data1/users/soyeb/bitbucket/pytorch-jacinto-ai-devkit/data/checkpoints/ade20k_seg_class32/cfg11_2021-03-07_23-36-26_ade20k_seg_class32_fpnlite_pixel2pixel_aspp_mobilenetv2_1p4_tv_resize512x512_traincrop512x512_epcoh120_53.10_53.01/training/model_best.pth
[33m=> creating model 'fpnlite_pixel2pixel_aspp_mobilenetv2_1p4_tv'[39m
=> using pretrained weights from: /data/adas_vision_data1/users/soyeb/bitbucket/pytorch-jacinto-ai-devkit/data/checkpoints/ade20k_seg_class32/cfg11_2021-03-07_23-36-26_ade20k_seg_class32_fpnlite_pixel2pixel_aspp_mobilenetv2_1p4_tv_resize512x512_traincrop512x512_epcoh120_53.10_53.01/training/model_best.pth
=> Size = [512, 512], GFLOPs = 13.071654912, GMACs = 6.535827456
FPNLitePixel2PixelASPP(
  (encoder): MobileNetV2TVMI4(
    (features): Sequential(
      (0): Sequential(
        (0): Conv2d(3, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6()
      )
      (1): InvertedResidual(
        (conv): Sequential(
          (0): Sequential(
            (0): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48, bias=False)
            (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
          (1): Conv2d(48, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): InvertedResidual(
        (conv): Sequential(
          (0): Sequential(
            (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
          (1): Sequential(
            (0): Conv2d(144, 144, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=144, bias=False)
            (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
          (2): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): InvertedResidual(
        (conv): Sequential(
          (0): Sequential(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
          (1): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
          (2): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (add): AddBlock(inplace=False, signed=True)
      )
      (4): InvertedResidual(
        (conv): Sequential(
          (0): Sequential(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
          (1): Sequential(
            (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=192, bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
          (2): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (3): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): InvertedResidual(
        (conv): Sequential(
          (0): Sequential(
            (0): Conv2d(48, 288, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
          (1): Sequential(
            (0): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288, bias=False)
            (1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
          (2): Conv2d(288, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (3): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (add): AddBlock(inplace=False, signed=True)
      )
      (6): InvertedResidual(
        (conv): Sequential(
          (0): Sequential(
            (0): Conv2d(48, 288, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
          (1): Sequential(
            (0): Conv2d(288, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=288, bias=False)
            (1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
          (2): Conv2d(288, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (3): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (add): AddBlock(inplace=False, signed=True)
      )
      (7): InvertedResidual(
        (conv): Sequential(
          (0): Sequential(
            (0): Conv2d(48, 288, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
          (1): Sequential(
            (0): Conv2d(288, 288, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=288, bias=False)
            (1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
          (2): Conv2d(288, 88, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (3): BatchNorm2d(88, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (8): InvertedResidual(
        (conv): Sequential(
          (0): Sequential(
            (0): Conv2d(88, 528, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(528, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
          (1): Sequential(
            (0): Conv2d(528, 528, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=528, bias=False)
            (1): BatchNorm2d(528, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
          (2): Conv2d(528, 88, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (3): BatchNorm2d(88, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (add): AddBlock(inplace=False, signed=True)
      )
      (9): InvertedResidual(
        (conv): Sequential(
          (0): Sequential(
            (0): Conv2d(88, 528, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(528, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
          (1): Sequential(
            (0): Conv2d(528, 528, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=528, bias=False)
            (1): BatchNorm2d(528, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
          (2): Conv2d(528, 88, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (3): BatchNorm2d(88, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (add): AddBlock(inplace=False, signed=True)
      )
      (10): InvertedResidual(
        (conv): Sequential(
          (0): Sequential(
            (0): Conv2d(88, 528, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(528, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
          (1): Sequential(
            (0): Conv2d(528, 528, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=528, bias=False)
            (1): BatchNorm2d(528, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
          (2): Conv2d(528, 88, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (3): BatchNorm2d(88, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (add): AddBlock(inplace=False, signed=True)
      )
      (11): InvertedResidual(
        (conv): Sequential(
          (0): Sequential(
            (0): Conv2d(88, 528, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(528, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
          (1): Sequential(
            (0): Conv2d(528, 528, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=528, bias=False)
            (1): BatchNorm2d(528, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
          (2): Conv2d(528, 136, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (3): BatchNorm2d(136, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (12): InvertedResidual(
        (conv): Sequential(
          (0): Sequential(
            (0): Conv2d(136, 816, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(816, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
          (1): Sequential(
            (0): Conv2d(816, 816, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=816, bias=False)
            (1): BatchNorm2d(816, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
          (2): Conv2d(816, 136, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (3): BatchNorm2d(136, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (add): AddBlock(inplace=False, signed=True)
      )
      (13): InvertedResidual(
        (conv): Sequential(
          (0): Sequential(
            (0): Conv2d(136, 816, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(816, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
          (1): Sequential(
            (0): Conv2d(816, 816, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=816, bias=False)
            (1): BatchNorm2d(816, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
          (2): Conv2d(816, 136, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (3): BatchNorm2d(136, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (add): AddBlock(inplace=False, signed=True)
      )
      (14): InvertedResidual(
        (conv): Sequential(
          (0): Sequential(
            (0): Conv2d(136, 816, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(816, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
          (1): Sequential(
            (0): Conv2d(816, 816, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=816, bias=False)
            (1): BatchNorm2d(816, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
          (2): Conv2d(816, 224, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (3): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (15): InvertedResidual(
        (conv): Sequential(
          (0): Sequential(
            (0): Conv2d(224, 1344, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(1344, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
          (1): Sequential(
            (0): Conv2d(1344, 1344, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1344, bias=False)
            (1): BatchNorm2d(1344, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
          (2): Conv2d(1344, 224, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (3): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (add): AddBlock(inplace=False, signed=True)
      )
      (16): InvertedResidual(
        (conv): Sequential(
          (0): Sequential(
            (0): Conv2d(224, 1344, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(1344, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
          (1): Sequential(
            (0): Conv2d(1344, 1344, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1344, bias=False)
            (1): BatchNorm2d(1344, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
          (2): Conv2d(1344, 224, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (3): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (add): AddBlock(inplace=False, signed=True)
      )
      (17): InvertedResidual(
        (conv): Sequential(
          (0): Sequential(
            (0): Conv2d(224, 1344, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(1344, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
          (1): Sequential(
            (0): Conv2d(1344, 1344, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1344, bias=False)
            (1): BatchNorm2d(1344, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
          (2): Conv2d(1344, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (3): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (decoders): ModuleList(
    (0): FPNLitePixel2PixelDecoder(
      (rfblock): DWASPPLiteBlock(
        (conv1x1): Sequential(
          (0): Conv2d(448, 360, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(360, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU6()
        )
        (aspp_bra1): Sequential(
          (0): Sequential(
            (0): Conv2d(448, 448, kernel_size=(3, 3), stride=(1, 1), padding=(6, 6), dilation=(6, 6), groups=448, bias=False)
            (1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
          (1): Sequential(
            (0): Conv2d(448, 360, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(360, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
        )
        (aspp_bra2): Sequential(
          (0): Sequential(
            (0): Conv2d(448, 448, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=448, bias=False)
            (1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
          (1): Sequential(
            (0): Conv2d(448, 360, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(360, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
        )
        (aspp_bra3): Sequential(
          (0): Sequential(
            (0): Conv2d(448, 448, kernel_size=(3, 3), stride=(1, 1), padding=(18, 18), dilation=(18, 18), groups=448, bias=False)
            (1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
          (1): Sequential(
            (0): Conv2d(448, 360, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(360, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
        )
        (dropout): Dropout2d(p=0.2, inplace=True)
        (aspp_out): Sequential(
          (0): Conv2d(1440, 360, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(360, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU6()
        )
        (cat): CatBlock(inplace=False, signed=True)
      )
      (fpn): InLoopFPNLitePyramid(
        (smooth_convs): ModuleList(
          (0): None
          (1): Sequential(
            (0): Sequential(
              (0): Conv2d(360, 360, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=360, bias=False)
              (1): BatchNorm2d(360, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6()
            )
            (1): Sequential(
              (0): Conv2d(360, 360, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(360, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6()
            )
          )
          (2): Sequential(
            (0): Sequential(
              (0): Conv2d(360, 360, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=360, bias=False)
              (1): BatchNorm2d(360, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6()
            )
            (1): Sequential(
              (0): Conv2d(360, 360, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(360, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6()
            )
          )
          (3): Sequential(
            (0): Sequential(
              (0): Conv2d(360, 360, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=360, bias=False)
              (1): BatchNorm2d(360, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6()
            )
            (1): Sequential(
              (0): Conv2d(360, 360, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(360, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU6()
            )
          )
        )
        (shortcuts): ModuleList(
          (0): None
          (1): Sequential(
            (0): Conv2d(136, 360, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(360, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
          (2): Sequential(
            (0): Conv2d(48, 360, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(360, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
          (3): Sequential(
            (0): Conv2d(32, 360, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(360, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6()
          )
        )
        (upsamples): ModuleList(
          (0): ResizeWith()
          (1): ResizeWith()
          (2): ResizeWith()
        )
        (adds): ModuleList(
          (0): AddBlock(inplace=False, signed=True)
          (1): AddBlock(inplace=False, signed=True)
          (2): AddBlock(inplace=False, signed=True)
        )
      )
      (pred): Sequential(
        (0): Sequential(
          (0): Conv2d(360, 360, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=360, bias=False)
          (1): BatchNorm2d(360, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (1): Sequential(
          (0): Conv2d(360, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
  )
)
=> setting sgd optimizer
[32m=> validation 0.00% of 1x63... rate=0 Hz, eta=?, total=0:00:00, wall=00:09 IST=> validation 0.00% of 1x63... rate=0 Hz, eta=?, total=0:00:00, wall=00:09 IST=> validation 0.00% of 1x63...DataTime=1.1, Epoch=1/120, Output=[MeanIoU=50.68] rate=0 Hz, eta=?, total=0:00:00, wall=00:09 IST=> validation 1.59% of 1x63...DataTime=1.1, Epoch=1/120, Output=[MeanIoU=50.68] rate=2285.52 Hz, eta=0:00:00, total=0:00:00, wall=00:09 IST=> validation 1.59% of 1x63...DataTime=1.1, Epoch=1/120, Output=[MeanIoU=50.68] rate=2285.52 Hz, eta=0:00:00, total=0:00:00, wall=00:09 IST=> validation 1.59% of 1x63...DataTime=0.1345, Epoch=1/120, Output=[MeanIoU=50.3] rate=2285.52 Hz, eta=0:00:00, total=0:00:00, wall=00:09 IST=> validation 17.46% of 1x63...DataTime=0.1345, Epoch=1/120, Output=[MeanIoU=50.3] rate=1.84 Hz, eta=0:00:28, total=0:00:05, wall=00:09 IST=> validation 17.46% of 1x63...DataTime=0.1345, Epoch=1/120, Output=[MeanIoU=50.3] rate=1.84 Hz, eta=0:00:28, total=0:00:05, wall=00:09 IST=> validation 17.46% of 1x63...DataTime=0.08412, Epoch=1/120, Output=[MeanIoU=51.26] rate=1.84 Hz, eta=0:00:28, total=0:00:05, wall=00:09 IST=> validation 33.33% of 1x63...DataTime=0.08412, Epoch=1/120, Output=[MeanIoU=51.26] rate=1.79 Hz, eta=0:00:23, total=0:00:11, wall=00:09 IST=> validation 33.33% of 1x63...DataTime=0.08412, Epoch=1/120, Output=[MeanIoU=51.26] rate=1.79 Hz, eta=0:00:23, total=0:00:11, wall=00:09 IST=> validation 33.33% of 1x63...DataTime=0.06954, Epoch=1/120, Output=[MeanIoU=51.39] rate=1.79 Hz, eta=0:00:23, total=0:00:11, wall=00:09 IST=> validation 49.21% of 1x63...DataTime=0.06954, Epoch=1/120, Output=[MeanIoU=51.39] rate=1.75 Hz, eta=0:00:18, total=0:00:17, wall=00:09 IST=> validation 49.21% of 1x63...DataTime=0.06954, Epoch=1/120, Output=[MeanIoU=51.39] rate=1.75 Hz, eta=0:00:18, total=0:00:17, wall=00:09 IST=> validation 49.21% of 1x63...DataTime=0.06156, Epoch=1/120, Output=[MeanIoU=51.89] rate=1.75 Hz, eta=0:00:18, total=0:00:17, wall=00:09 IST=> validation 65.08% of 1x63...DataTime=0.06156, Epoch=1/120, Output=[MeanIoU=51.89] rate=1.74 Hz, eta=0:00:12, total=0:00:23, wall=00:09 IST=> validation 65.08% of 1x63...DataTime=0.06156, Epoch=1/120, Output=[MeanIoU=51.89] rate=1.74 Hz, eta=0:00:12, total=0:00:23, wall=00:09 IST=> validation 65.08% of 1x63...DataTime=0.05535, Epoch=1/120, Output=[MeanIoU=52.62] rate=1.74 Hz, eta=0:00:12, total=0:00:23, wall=00:09 IST=> validation 80.95% of 1x63...DataTime=0.05535, Epoch=1/120, Output=[MeanIoU=52.62] rate=1.74 Hz, eta=0:00:06, total=0:00:29, wall=00:09 IST=> validation 80.95% of 1x63...DataTime=0.05535, Epoch=1/120, Output=[MeanIoU=52.62] rate=1.74 Hz, eta=0:00:06, total=0:00:29, wall=00:09 IST=> validation 80.95% of 1x63...DataTime=0.05322, Epoch=1/120, Output=[MeanIoU=52.75] rate=1.74 Hz, eta=0:00:06, total=0:00:29, wall=00:09 IST=> validation 96.83% of 1x63...DataTime=0.05322, Epoch=1/120, Output=[MeanIoU=52.75] rate=1.73 Hz, eta=0:00:01, total=0:00:35, wall=00:09 IST=> validation 96.83% of 1x63...DataTime=0.05322, Epoch=1/120, Output=[MeanIoU=52.75] rate=1.73 Hz, eta=0:00:01, total=0:00:35, wall=00:09 IST=> validation 96.83% of 1x63...DataTime=0.05251, Epoch=1/120, Output=[MeanIoU=52.9] rate=1.73 Hz, eta=0:00:01, total=0:00:35, wall=00:09 IST=> validation 100.00% of 1x63...DataTime=0.05251, Epoch=1/120, Output=[MeanIoU=52.9] rate=1.70 Hz, eta=0:00:00, total=0:00:36, wall=00:09 IST
[39m[37m